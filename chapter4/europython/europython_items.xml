<?xml version="1.0" encoding="utf-8"?>
<items><item><title><value>AI in Contemporary Art</value></title><author><value>Luba Elliott</value></author><description><value>Over the past couple of years, there has been increasing interest in applying the latest advances in machine learning to creative projects in art and design. From DeepDream and style transfer to a GAN-generated painting selling for $430,000 at auction, AI art has moved beyond the world of research and academia and become a trend in its own right. Meanwhile, the contemporary art world's fascination with the social impact of facial recognition, recommendation systems and deep fakes has encouraged artists to explore AI critically as subject matter. This talk will give an overview of how artists and technologists are using and thinking about machine learning, its creative potential and societal impact.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Computer Vision</value><value>Deep Learning</value></tags></item><item><title><value>GraphQL in Python üçì</value></title><author><value>Patrick Arminio</value></author><description><value>Over the past few years GraphQL has gained much traction, but what‚Äôs the state of GraphQL in Python. This talk describes what GraphQL is, why it has been created and the current state of GraphQL libraries in Python.</value></description><date>July 2019</date><tags><value>Django</value><value>RESTful</value><value>Web</value><value>Web General</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>How to ship a Python app to a hundred million desktops</value></title><author><value>Max B√©langer</value></author><description><value>Python is widely used to write scripts and tools, but did you know that it can also be used to build client-side end-user applications? Crossing the gap from script to app can be challenging: Join us to learn how to write modern, high quality desktop apps in Python!</value></description><date>July 2019</date><tags><value>Architecture</value><value>Best Practice</value><value>Cross-Platform-Development</value><value>Mac OS X</value><value>Windows</value></tags></item><item><title><value>How to read (code)</value></title><author><value>Max Humber</value></author><description><value>When you learn a new language, like French or German or even English, you first learn how to read. Then you learn how to write. When you learn a new *programming* language, you first learn how to write. And that‚Äôs it. </value></description><date>July 2019</date><tags><value>Beginners</value><value>Clean Code</value><value>Documentation</value><value>Learning</value><value>Teaching</value></tags></item><item><title><value>How To Build a Python Microservice Without Losing a Job</value></title><author><value>Anton Caceres</value></author><description><value>Sarcastic talk, sharing real-life experience on both technical and social aspects of doing an architecture migration to microservices without losing a job.</value></description><date>July 2019</date><tags><value>Architecture</value><value>Best Practice</value><value>Communication</value><value>Distributed Systems</value><value>Microservices</value></tags></item><item><title><value>How Thinking in Python Made Me a Better Software Engineer</value></title><author><value>Johnny Dude</value></author><description><value>Did you ever wonder why development in Python can be x10 faster than development in languages like c++?</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Development</value><value>Software Design</value><value>The Answer to Life the Universe and Everything Else</value><value>failures/mistakes</value></tags></item><item><title><value>How software can feed the world üå±</value></title><author><value>Christian Barra</value></author><description><value>Infarm is a FaaS, Farming as a Service, and whether you believe it or not, our business is in-house farming at scale.</value></description><date>July 2019</date><tags><value>Big Data</value><value>Hardware/IoT</value><value>Internet of Things (IoT)</value><value>Machine-Learning</value><value>Python general</value></tags></item><item><title><value>Hack The CPython</value></title><author><value>Batuhan Ta≈ükaya</value></author><description><value>Have you ever realized how dynamic CPython interpreter is? Maybe it is the most dynamic interpreter you may see. It gives interfaces to internal things like garbage collector or AST, allows to alter functions code, modify built-in functions etc. </value></description><date>July 2019</date><tags><value>CPython</value></tags></item><item><title><value>Histogram-based Gradient Boosting in scikit-learn 0.21</value></title><author><value>Olivier Grisel</value></author><description><value>scikit-learn 0.21 was recently released and this presentation will give an overview its main new features in general and present the new implementation of Gradient Boosted Trees.</value></description><date>July 2019</date><tags><value>Cython</value><value>Data</value><value>Machine-Learning</value><value>Multi-Threading</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Google Cloud for Pythonistas</value></title><author><value>Dustin Ingram</value></author><description><value>Support for Python on Google Cloud has never been better. Join us for a tour of Python runtimes, services and client libraries, including App Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools for monitoring and debugging your Python application, and best practices for using Python on Google Cloud.</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>DevOps general</value><value>Development</value><value>Public Cloud (AWS/Google/...)</value><value>Web</value></tags></item><item><title><value>Go(lang) to Python</value></title><author><value>Stefan Baerisch</value></author><description><value>Python and Go are a great combination. Like Python, Go is easy to learn, powerful to use and has many useful libraries. Go and Python work great together: Go has better performance and parallelism, while Python is more expressive. Wouldn't it be nice if you could combine the benefits of Go and Python in one program? This talk shows you how.</value></description><date>July 2019</date><tags><value>Cython</value><value>Go-Lang</value><value>Tooling</value></tags></item><item><title><value>Geospatial Analysis using Python and JupyterHub</value></title><author><value>Martin Christen</value></author><description><value>Geospatial data is data containing a spatial component ‚Äì describing objects with a reference to the planet's surface. This data usually consists of a spatial component, of various attributes, and sometimes of a time reference (where, what, and when). Efficient processing and visualization of small to large-scale spatial data is a challenging task. </value></description><date>July 2019</date><tags><value>Analytics</value><value>Big Data</value><value>Deep Learning</value><value>GPU</value><value>Visualization</value></tags></item><item><title><value>Get up to speed with Cython 3.0</value></title><author><value>Stefan Behnel</value></author><description><value>Processing lots of data, in need of more speed, or struggling to make use of native code? The Cython compiler for Python solves all of these problems in a pythonic way, by compiling Python code to optimised C code.</value></description><date>July 2019</date><tags><value>C-Languages</value><value>Compiler and Interpreters</value><value>Cython</value><value>Performance</value><value>Programming</value></tags></item><item><title><value>EuroPython 2020: Help us build the next edition!</value></title><author><value>Marc-Andre Lemburg</value></author><description><value>We need help with organizing and running EuroPython 2020.</value></description><date>July 2019</date><tags><value>Community</value><value>EuroPython</value><value>EuroPython Society (EPS)</value></tags></item><item><title><value>Gamifying the study of algorithms</value></title><author><value>Iulia Avram</value></author><description><value>Do you remember when you used to learn algorithms? It was probably either back when you were studying for your degree, or when you were brushing up for a technical interview. If you're like most of the developers I know, solving algorithms probably went from being a fun past-time, to a bothersome necessity, to a thing of the past. Our life has been greatly improved by our tools and there's little need to know all sorting methods out there, or how to search through a tree. Or maybe we're wrong, maybe knowing these things could make a difference in how we write code. </value></description><date>July 2019</date><tags><value>Algorithms</value><value>Best Practice</value><value>Education</value><value>Fun and Humor</value></tags></item><item><title><value>Game Development with CircuitPython</value></title><author><value>Radomir Dopieralski</value></author><description><value>Making computer games is difficult: it requires creativity, multidisciplinary knowledge of art, psychology, math, computer science, physics and others, patience, open mind and dedication. Making computer games with Python is a nightmare. You hit practically every sharp corner that Python has, starting with installation, through binary libraries, poor hardware support, up to distribution.</value></description><date>July 2019</date><tags><value>Education</value><value>Gadgets</value><value>Hardware/IoT</value><value>Learning</value><value>MicroPython</value></tags></item><item><title><value>From Python script to Open Source Project</value></title><author><value>Micha≈Ç Karzy≈Ñski</value></author><description><value>Did you write a cool and useful Python script? Would you like to share it with the community, but you're not sure how to go about that? If so, then this talks is for you. We'll go over a list of simple steps which can turn your script into a fully fledged open-source project.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Clean Code</value><value>Code Analysis</value><value>Static Analysis</value><value>Tooling</value></tags></item><item><title><value>ü§ñ Open Source projects automation</value></title><author><value>Sviatoslav Sydorenko</value></author><description><value>Over the years of maintaining a number of FOSS projects, I've got a lot of hands-on experience of automating various processes related to maintainership responsibilities.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Deployment/Continuous Integration and Delivery</value><value>Open-Source</value><value>PyPi</value><value>Templating</value></tags></item><item><title><value>EPS General Assembly 2019</value></title><author><value>Marc-Andre Lemburg</value></author><description><value>This is where the EuroPython Society (EPS) board gives its reports, resolutions are passed and the EPS members can vote in a new EPS board.</value></description><date>July 2019</date><tags><value>Community</value><value>EPS</value><value>EuroPython</value><value>EuroPython Society (EPS)</value></tags></item><item><title><value>Write a better conference talk proposal</value></title><author><value>Daniele Procida</value></author><description><value>It's not enough to write a good talk. You have have to produce a good talk proposal to be selected in the first place. For most conferences, many people submit proposals to the CFP, but only a few are selected - sometimes as few as one in ten or more.</value></description><date>July 2019</date><tags><value>Conferences and Meet-Ups</value></tags></item><item><title><value>The pytest/tox/devpi help desk</value></title><author><value>Oliver Bestwalter</value></author><description><value>We‚Äôll try to help everyone with their questions around pytest, tox and devpi and how they work together to test and release your packages.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Test Libraries (pytest/nose/...)</value><value>Testing</value><value>python</value></tags></item><item><title><value>PyPy help desk</value></title><author><value>Ronan Lamy</value></author><description><value>PyPy is a fast alternative implementation of Python.</value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>Performance</value><value>PyPy</value></tags></item><item><title><value>Python Boot Camp: Introduction of efforts to spread Python all over Japan</value></title><author><value>Takanori Suzuki</value></author><description><value>[Python Boot Camp](https://www.pycon.jp/support/bootcamp.html)(#pycamp) is a Python beginner course held all over Japan. #pycamp is organized by PyCon JP Committee and has been held 30 times in 28 regions starting from 2016. The purpose of #pycamp is to expand the Python community throughout Japan, and as a result several local communities were established.</value></description><date>July 2019</date><tags><value>Case Study</value><value>Community</value><value>Education</value><value>Learning</value><value>Programming</value></tags></item><item><title><value>Protecting secrets with Oslo.Config and HashiCorp Vault</value></title><author><value>Mois√©s Guimar√£es</value></author><description><value>Applications and services rely on configuration data in order to be customized, and for a cloud operating system like OpenStack it is not that different.</value></description><date>July 2019</date><tags><value>Authentication</value><value>Cryptography</value><value>Data Protection</value><value>Security</value></tags></item><item><title><value>From circuit board design to finished product</value></title><author><value>Sebastian Roll</value></author><description><value>Ever wondered how hardware is made, or curious about making your own?</value></description><date>July 2019</date><tags><value>Gadgets</value><value>Hardware/IoT</value><value>Internet of Things (IoT)</value><value>MicroPython</value></tags></item><item><title><value>The Forest Wiki</value></title><author><value>Christopher Lozinski</value></author><description><value>The Forest Wiki is a tree of Wiki pages..  You can edit both the content and the look and feel n the browser.   Python code can be run in the browser using either Transcrypt or Pyodide. </value></description><date>July 2019</date><tags><value>Beginners</value><value>Docker</value><value>Documentation</value><value>Graph Databases</value><value>Plone</value></tags></item><item><title><value>Write your own games, simulations and demonstrations with PyGame</value></title><author><value>Coen de Groot</value></author><description><value>(Important: before the workshop, go to http://www.compassmentis.com/europython2019/)</value></description><date>July 2019</date><tags><value>Education</value><value>Game-Development</value><value>Learning</value><value>Teaching</value></tags></item><item><title><value>Writing interoperable REST APIs with OpenAPI 3 and connexion</value></title><author><value>Roberto Polli</value></author><description><value>Abstract</value></description><date>July 2019</date><tags><value>APIs</value><value>HTTP</value></tags></item><item><title><value>Flexport ‚Äì extremely pluggable reporting</value></title><author><value>Martin Gfeller</value></author><description><value>Numerical reporting is used in many domains ‚Äì from accounting (oldest written records) to financial risk management (our domain) to science.  Reporting has a chasm with an island in the middle ‚Äì programming-less, limited (‚ÄúReport Writers‚Äù, even advanced systems like Tableau, Qlik) to programming required, anything possible. Excel sits in the middle of the chasm, limited programming, limited flexibility.  What we like for users to be flexible in their report arrangements, and programmers to be able to add functionalities in a piecemeal way. </value></description><date>July 2019</date><tags><value>Analytics</value><value>Case Study</value><value>Human-Machine-Interaction</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value><value>Software Design</value></tags></item><item><title><value>Chirps: A Twitter Bot Framework written in Python</value></title><author><value>Parth Shandilya</value></author><description><value>Twitter bots are a powerful way to up your social media game as well as extracting information from the microblogging network. By leveraging Twitter‚Äôs versatile APIs, a bot can do a lot of things - tweet, retweet, ‚Äúfav-tweet‚Äù, follow, reply automatically and much more! When done in the right way, the combination of the above actions can be of great utility. Even though some bots can abuse their power and give a negative experience to other users, research shows that people view Twitter bots as a credible source of information. For example, a bot can keep your followers engaged with content even when you‚Äôre not online. Some bots even provide critical and helpful information (e.g, @EarthquakesSF). It is estimated that bots account for about 24% of all tweets on Twitter.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Open-Source</value><value>Python 3</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>Step Into the AI Era: Chatbots that know if you are angry</value></title><author><value>Cheuk Ho</value><value>Kara de la Marck</value></author><description><value>In this workshop, through hands on coding exercises, participants will learn how to use an open source chatbot framework, RASA, in conjunction with an NLP library, NLTK, to build a chatbot that gathers customer feedback and generates a report regarding the sentiment of the text.</value></description><date>July 2019</date><tags><value>Data Science</value><value>Machine-Learning</value><value>Natural Language Processing</value><value>Open-Source</value><value>Use Case</value></tags></item><item><title><value>MicroPython Bootcamp: Batteries Included!</value></title><author><value>Sebastian Roll</value></author><description><value>In this training session, you are provided with a custom made controller packed with hardware components such a touch displays, buttons, joysticks and various sensors. The hardware design is open source and available at https://github.com/bytebarista/controller_pcb.</value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>Gadgets</value><value>Hardware/IoT</value><value>Internet of Things (IoT)</value><value>MicroPython</value></tags></item><item><title><value>MongoDB for Python Developers</value></title><author><value>Michael Lynn</value></author><description><value>Learn the essentials of Python application development with</value><value>MongoDB as you build and complete a fully functional web application.</value><value>Attendees will receive an overview and introduction to MongoDB and then application development with Python and MongoDB before embarking on a journey of discovery, completing ticket-based work packages each designed to build on the previous. Learners will swiftly gain the skills necessary to leverage Python and MongoDB to build modern web applications.</value></description><date>July 2019</date><tags><value>Databases</value><value>Development</value><value>Jupyter</value><value>MongoDB</value><value>Programming</value></tags></item><item><title><value>Kubernetes 101 for Python Developers</value></title><author><value>Christian Barra</value></author><description><value>Do you find easier to build a 3894 pieces IKEA‚Äôs furniture than using K8s?</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Configuration Management (Ansible/Fabric/Chef/...)</value><value>Deployment/Continuous Integration and Delivery</value><value>DevOps general</value><value>Distributed Systems</value></tags></item><item><title><value>High Performance deep learning with Intel technologies</value></title><author><value>Shailen Sobhee</value></author><description><value>We take a look at a solid use-case of the application of deep learning in the healthcare sector. In a hands-on fashion, you will get the chance to walk through the Python-based algorithm that performs a tumour segmentation from MRI scans of the human brain. We will explore the deep neural network used, the framework leveraged and the hyper-parameter tuning considerations for best training and inferencing performance. In this session, you will also see what the Intel¬Æ Math Kernel Library for Deep Neural Networks (Intel¬Æ MKL-DNN) does behind the scenes to maximise hardware performance.</value></description><date>July 2019</date><tags><value>Cross-Platform-Development</value><value>Data Science</value><value>Deep Learning</value><value>Distributed Systems</value><value>Performance</value></tags></item><item><title><value>Keep Those Ducks in (Type) Check!</value></title><author><value>Francesco Pierfederici</value></author><description><value>PEP 484 (building upon PEP 3107) introduced support for type hints. Type hints allow, among other things, third-party tools to check Python code for possible bugs due to unintentional type mismatches. They also serve as documentation for your functions and methods. </value></description><date>July 2019</date><tags><value>Code Analysis</value><value>Mind Bending</value><value>Programming</value><value>Python 3</value><value>Type-Hinting</value></tags></item><item><title><value>How to power up your product by machine learning with python micro-service</value></title><author><value>Dmitry Kisler</value></author><description><value>Most of data science articles cover details on how to build machine learning models, however only few describe how machine learning projects are being integrated into product (web-, or mobile app). </value></description><date>July 2019</date><tags><value>APIs</value><value>Docker</value><value>Machine-Learning</value><value>Microservices</value></tags></item><item><title><value>Get to grips with pandas and scikit-learn</value></title><author><value>Sandrine Pataut</value></author><description><value>We hear a lot about Machine Learning, but it‚Äôs just one part of a bigger process. Before applying any algorithm to a data set, discovery and preparation are needed. This hands-on workshop will cover an end-to-end classification project, from importing the data to evaluating a model performance. After this tutorial, you will have completed a step by step Machine Learning workflow.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Analytics</value><value>Beginners</value><value>Data Science</value><value>Machine-Learning</value></tags></item><item><title><value>Introduction to pytest</value></title><author><value>Florian Bruhin</value></author><description><value>The pytest tool presents a rapid and simple way to write tests for your Python code. This training gives an introduction with exercises to some distinguishing features. We'll also examine how to run existing non-pytest test suites and discuss migration strategies. Various plugins which extend pytest's functionality even further will be introduced. We'll finish with discussing topics and questions of participants related to their own test suites and usages.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>TDD</value><value>Test Libraries (pytest/nose/...)</value><value>Testing</value></tags></item><item><title><value>Functional Programming with Python</value></title><author><value>Mike M√ºller</value></author><description><value>The functional programming paradigm has been around for a long time but</value><value>currently experiences a renaissance. Many of its principles promise better,</value><value>more stable, more readable and easily testable programs. Python's</value><value>multi-paradigm nature allows to choose the right style for a task.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Data Structures</value><value>Functional Programming</value><value>Python 3</value><value>Python Skills</value></tags></item><item><title><value>First Steps in Web Development with Python</value></title><author><value>Miguel Grinberg</value></author><description><value>Are you a Python beginner interested in learning Web Development? If you find the number of different technologies that you need to learn to build even a simple web site overwhelming, this might be a class for you. I will assume that you have basic Python knowledge and no web development experience, and through a series of lectures and hands-on exercises, I will help you make sense of it all. By the end of the class you will have a high-level understanding of the web development ecosystem, plus a complete starter web application running in your laptop.</value></description><date>July 2019</date><tags><value>HTML5</value><value>HTTP</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>But I never wanted to do DevOps!</value></title><author><value>Daniele Procida</value></author><description><value>You're a programmer, which you love doing, but the culture of DevOps is pulling you towards a world in which you're supposed to be responsible for the dark art of operations too. Maybe you're happy with that - but what if you regard that prospect a bit anxiously? What if the next step is to be given a pager to keep by your bed, or to find yourself on alert during a children's birthday party?</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>DevOps general</value><value>Django</value><value>Docker</value><value>Web</value></tags></item><item><title><value>Boost your Python and Machine Learning  algorithms</value></title><author><value>Shailen Sobhee</value></author><description><value>In this session, we will first have a quick overview of Intel's rich software offering for your HPC and AI needs. We will then explore deeper with hands-on exercises, how we take the performance of key Python packages such as numpy, numba and scikit-learn to the next level thanks to performance libraries like  the Intel¬Æ Data Analytics and Acceleration Library (Intel¬Æ DAAL) and the Intel¬Æ Math Kernel Library (Intel¬Æ MKL).</value></description><date>July 2019</date><tags><value>Analytics</value><value>Data Science</value><value>Machine-Learning</value><value>Performance</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Analytics with üêº Pandas and Jupyterlab</value></title><author><value>Alexander CS Hendorf</value></author><description><value>For Analytics Pandas is a de-facto industry standard and an established tool in the scientific community. Dealing with data-analysis is easy and simple -  but there are some things you need to get your head around first as Data-Frames and Data-Series.</value></description><date>July 2019</date><tags><value>Analytics</value><value>Data</value><value>Data Science</value><value>Visualization</value></tags></item><item><title><value>Zen of Python Dependency Management</value></title><author><value>Justin Mayer</value></author><description><value>Ensuring reliably repeatable dependency installation has long been an unsolved problem for many Python projects. Pinning dependencies via setup.py and requirements.txt has historically been met with extra work and unexpected results, particularly when managing the dependencies of dependencies.</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>Open-Source</value><value>Packaging</value><value>PyPi</value></tags></item><item><title><value>Writing a Python autoreloader</value></title><author><value>Tom Forbes</value></author><description><value>Reloading your code changes quickly is an integral part of the development experience in frameworks like Django and Flask that developers have come to rely on. But how do they work under the hood and what challenges do you face while writing one?</value></description><date>July 2019</date><tags><value>Architecture</value><value>Development</value><value>Django</value><value>Python 3</value><value>Software Design</value></tags></item><item><title><value>‚ÄúWhen a biologist met Python‚Äù</value></title><author><value>Maria Molina-Contreras</value></author><description><value>Biology and computing are closer than we usually think, for example many algorithms are inspired in biology patterns, and complementary to that, researchers needs special algorithms to have a better understanding of our environment. Thus, there is a strong relation an dependency.</value><value>In the past years, Biology has been transformed into computational biology. Therefore</value><value>technological advances helps us to predict physical interactions between atoms and DNA, because we are being able to integrate information from biology into algorithms.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Data Science</value><value>Natural Science</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value><value>python</value></tags></item><item><title><value>What about recommendation engines?</value></title><author><value>Adriana Dorneles</value></author><description><value>How recommendation engines are taking part in our daily routine and how companies as Netflix and Amazon implement it?</value><value>This talk aims to show the elements that compound a recommendation engine to people who have never been in touch with the matter or want to know a bit more. At the end of this session, you might be able to reproduce your own recommendation system and also know where to find more about it.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Big Data</value><value>Business</value><value>Data Science</value><value>Python 3</value></tags></item><item><title><value>Visual debugger for Jupyter Notebooks: Myth or Reality?</value></title><author><value>Elizaveta Shashkova</value></author><description><value>Many Python developers like Jupyter Notebooks for their flexibility: they are very useful for interactive prototyping, scientific experiments, visualizations and many other tasks. There are different development tools which make working with Jupyter Notebooks easier and smoother, but all of them lack very important feature: visual debugger. Since Jupyter Kernel is a usual Python process, it looks reasonably to use one of existing Python debuggers with it. But is it really possible? </value></description><date>July 2019</date><tags><value>Debugging</value><value>Jupyter</value><value>Python general</value><value>Tooling</value></tags></item><item><title><value>Wait, IPython can do that?!</value></title><author><value>Sebastian Witowski</value></author><description><value>I've been programming in Python for over 7 years. And from the time someone introduced me to IPython, it immediately became my default Python REPL. I enjoyed the syntax highlighting, code completion or the instant access to the documentation. Over the years, I've picked up more and more tricks that IPython could do: embedding IPython sessions, starting IPython automatically when a test fails, taking advantage of the startup files, not to mention all the various magic functions.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Development</value><value>Ipython</value><value>Tooling</value><value>iPython</value></tags></item><item><title><value>useFlask() - or how to use a React frontend for your Flask app</value></title><author><value>Adrian M√∂nnich</value></author><description><value>Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets.</value></description><date>July 2019</date><tags><value>JavaScript Web Frameworks (AngularJS/ReactJS/...)</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Unleash the power of C++ in Python</value></title><author><value>Cristi√°n Maureira-Fredes</value></author><description><value>One of the main Python aspects is to have a clear syntax and be an</value><value>easy-to-understand language, which compared to others like C++</value><value>(depending of the kindness of the developer) can make a huge difference.</value><value>Not only the readability is in play, having a dynamically typed</value><value>and interpreted language improves the development workflow.</value></description><date>July 2019</date><tags><value>C-Languages</value><value>CPython</value></tags></item><item><title><value>Understanding Numba - the Python and Numpy compiler</value></title><author><value>Christoph Deil</value></author><description><value>Do you have numerical code written in Python and Numpy? Do you wish it ran faster, using the full potential of your CPU?</value></description><date>July 2019</date><tags><value>CPython</value><value>Compiler and Interpreters</value><value>Multi-Threading</value><value>Performance</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Understanding how a malware works using Python</value></title><author><value>Yan Orestes</value></author><description><value>Nowadays, security is one of the most important topics in the entire computing world, and indeed in the world in general, ranging from political aspects such as the virus that affected Iranian centrifuges to the more personal side such as your cousin who had their social network account invaded and never understood how it happened. But how does this all work? Is a malware so complicated to understand?</value></description><date>July 2019</date><tags><value>Data Privacy</value><value>Privacy</value><value>Python 3</value><value>Security</value><value>Socket</value></tags></item><item><title><value>Using Python to Teach Computational Finance</value></title><author><value>Tyler Brough</value></author><description><value>In this demo-driven session, we will introduce the Probo package for teaching Python programming and concepts from computational finance to beginning programmers in the domain of finance. We'll show how Python is the perfect tool for teaching computational thinking to develop deeper quantitative reasoning. Jupyter notebooks, together with Python packages such as NumPy and Pandas, provide the ideal learning environment. </value></description><date>July 2019</date><tags><value>Beginners</value><value>Business</value><value>Business Cases</value><value>Education</value><value>Jupyter</value></tags></item><item><title><value>Tips for the scientific programmer</value></title><author><value>Michele Simionato</value></author><description><value>This is a talk for people who need to perform large numeric calculations. They could be scientists, developers working in close contact with scientists, or even people working on finance and other quantitative fields. Such people are routinely confronted with issues like</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Architecture</value><value>Big Data</value><value>Case Study</value><value>Performance</value></tags></item><item><title><value>Tools of the Trade: The Making of a Code Editor.</value></title><author><value>Nicholas Tollervey</value></author><description><value>This talk tells the story of Mu, a native code editor written in Python (https://codewith.mu/).</value></description><date>July 2019</date><tags><value>Cross-Platform-Development</value><value>Development</value><value>Education</value><value>Packaging</value><value>failures/mistakes</value></tags></item><item><title><value>The world's cheapest, simplest plotter</value></title><author><value>Daniele Procida</value></author><description><value>I present an ultra-cheap (total cost of materials :‚Ç¨12.50) plotter that can be built with minimal skills.</value></description><date>July 2019</date><tags><value>Education</value></tags></item><item><title><value>The dos and don'ts of task queues</value></title><author><value>Petr Stehl√≠k</value></author><description><value>At Kiwi.com we heavily rely on task queues and asynchronous execution of code to process large amounts of requests coming to our back-ends. With the separation of our codebase to microservices, we can quickly try new tools and different approaches to process these large volumes of requests. The microservice we‚Äôll be talking about is making unreliable slow 3rd party services reliable and asynchronous with a bit of business logic sprinkled on top of it. We‚Äôll tell a failure story of ours but resulting in a valuable lesson.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Architecture</value><value>Best Practice</value><value>Case Study</value><value>failures/mistakes</value></tags></item><item><title><value>The Story of Features Coming in Python 3.8 and Beyond</value></title><author><value>Andrey Vlasovskikh</value></author><description><value>What's coming in Python 3.8? You can learn it by yourself by reading an excellent document [What's New in Python 3.8][1]. I'm not going to retell this document. Instead I'll focus on things barely described there or not mentioned at all:</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Compiler and Interpreters</value><value>New Features</value><value>Python 3</value><value>Type-Hinting</value></tags></item><item><title><value>The state of Machine Learning Operations in 2019</value></title><author><value>Alejandro Saucedo</value></author><description><value>This talk will provide an overview of the key challenges and trends in the productization of machine learning systems, including concepts such as reproducibility, explainability and orchestration. The talk will also provide a high level overview of several key open source tools and frameworks available to tackle these issues, which have been identifyed putting together the Awesome Machine Learning Operations list (https://github.com/EthicalML/awesome-machine-learning-operations). </value></description><date>July 2019</date><tags><value>Architecture</value><value>Data</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>The soul of the beast</value></title><author><value>Pablo Salgado</value></author><description><value># Why</value></description><date>July 2019</date><tags><value>Abstractions</value><value>CPython</value><value>Performance</value><value>python</value></tags></item><item><title><value>The Secret Life of Software</value></title><author><value>Dougal Matthews</value></author><description><value>Software infrastructure is changing. Microservices, Containers, Continuous Integration, Serverless and many other ideas are growing in popularity. This added complexity comes with benefits but it is harder to answer simple questions about system behaviour. Do you know what is happening in your production app?</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>Distributed Systems</value><value>Docker</value><value>Microservices</value></tags></item><item><title><value>The Dangers of Outsourcing Software Development</value></title><author><value>Sebastian Roll</value></author><description><value>Customer lock-in. Dubious ‚ÄúLand and Expand‚Äù strategies. We have all heard about outsourced software projects that run far past schedule and obliterates the budget, yet somehow fail to meet even basic requirements. </value></description><date>July 2019</date><tags><value>Business</value><value>Clients</value><value>Ethics</value><value>Management</value><value>freelancing</value></tags></item><item><title><value>Testing Microservices: fast and with confidence</value></title><author><value>Stephan Jaensch</value></author><description><value>A main advantage of microservices is improved developer velocity. One roadblock to achieving it is giving developers the confidence that their changes are correct and safe, which is a challenging problem in such a distributed architecture. Typical approaches involve relying on automated end-to-end testing, which is costly to set up, develop tests for and run.</value></description><date>July 2019</date><tags><value>Distributed Systems</value><value>Microservices</value><value>Testing</value><value>python</value></tags></item><item><title><value>The Agile comedy: from hell to paradise</value></title><author><value>Anastasiia Tymoshchuk</value></author><description><value>Nowadays everyone wants to bring Agile Best Practices into all the teams, but it's a hard task to implement it and adapt based on different teams. Setting up all necessary Agile meetings and using buzz words is not enough for the team to be happy and successful while working in Agile environment.</value><value>Inspired by the "Divine Comedy" by Dante Alighieri, I decided to create a short guide into Agile best practices. It will guide through Failures, Challenges to the Success in building a happy dream team!</value><value>This talk is divided into three parts:</value><value>1. Failures in setting up Agile processes for a team.</value><value>2. Challenges on the way to happy and successful team.</value><value>3. Successful examples how to have happy and productive Agile team and constantly deliver a great product.</value></description><date>July 2019</date><tags><value>Agile</value><value>Development</value><value>General</value><value>The Answer to Life the Universe and Everything Else</value></tags></item><item><title><value>TensorFlow 2.0: TensorFlow Strikes Back</value></title><author><value>Michele De Simoni</value></author><description><value>The talk will showcase the main features of this new TF version that should appease the needs of the Researcher and Practitioner alike. A focus will be put on:</value><value>- Keras as the new standard API</value><value>- Eager Mode &amp; Graph </value><value>- Production Pipeline</value><value>- Extended Ecosystem</value></description><date>July 2019</date><tags><value>APIs</value><value>Beginners</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>Tech-Powered OSINT: hunting for intelligence in open sources with Python</value></title><author><value>Chiin-Rui Tan</value></author><description><value>What is OSINT? And who cares?     </value></description><date>July 2019</date><tags><value>Algorithms</value><value>Data</value><value>Machine-Learning</value><value>Open-Source</value><value>Web Crawling</value></tags></item><item><title><value>Teaching Programming to the Next Generation</value></title><author><value>Lilian Nandi anonymous</value></author><description><value>Our generation of young people in school (aged 5-18) have noticed the connection between Computer pRogramming, Technology &amp; Success and Billionaires.On mass they are clamoring to master the skill of Computer pRogramming. We describe a successful working model for the teaching of Computer pRogamming.</value></description><date>July 2019</date><tags><value>All Other Programming Languages</value><value>Education</value><value>Programming</value><value>Python 3</value><value>Teaching</value></tags></item><item><title><value>Supercharge your Deep Learning algorithms with optimized software</value></title><author><value>Shailen Sobhee</value></author><description><value>In this talk, you will learn various optimization techniques to improve the runtime performance of your deep learning algorithms on Intel architecture. The presentation will cover how to accelerate the training of your deep neural networks with Tensorflow thanks to the highly optimized Intel¬Æ Math Kernel Library (Intel¬Æ MKL) and how we boost inferencing with Intel¬Æ nGraph and with the Intel¬Æ Distribution of OpenVINO‚Ñ¢.</value></description><date>July 2019</date><tags><value>Data Science</value><value>Deep Learning</value><value>Open-Source</value></tags></item><item><title><value>Tensorflow Estimators</value></title><author><value>Mai Gim√©nez</value></author><description><value>Tensorflow is one of the most powerful machine learning libraries. </value><value>However, one could argue that it is as well one of the most convoluted libraries to utilise. Or it used to be. </value><value>Tensorflow has been updating its API, simplifying the pipeline while keeping it flexible. You could either predict your class label using a pre-trained canned estimator or doing some fancy operations with the inner tensors of your neural network. It's a choose your own adventure game. </value><value>But it's challenging to make sense of all the new changes. Fear not. Here, we learned what changes we should adopt. </value></description><date>July 2019</date><tags><value>Best Practice</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>status quo of virtual environments</value></title><author><value>Bernat Gabor</value></author><description><value>Python is easy to learn and use programming language; however, managing dependencies and package versions for it are nowhere as pleasant. One of the basic building block created to help with this is virtual environments. Join me in understanding how virtual environments work from within (by one of the project maintainers); also, to find out if the good old virtualenv project has any place left, now that Python 3.4+ contains venv.</value></description><date>July 2019</date><tags><value>Virtual Env</value></tags></item><item><title><value>Python vs Rust for Simulation</value></title><author><value>Alisa Dammer</value></author><description><value>Both Python and Rust are getting more and more popularity. Although it is unfair to compare them directly, this talk aims to provide a clear comparison with a pre-defined criteria applied to a specific use-case. </value><value>Writing a simulation engine is very similar to writing a game engine and requires certain features from a language or framework.</value><value>Possible comparison criteria: </value><value>1. Performance</value><value>2. Simplicity</value><value>3. Amount of code necessary for a MVP</value><value>4. Utilities: docs, tests, profile</value><value>5. Compatibility</value></description><date>July 2019</date><tags><value>Code Analysis</value><value>Development</value><value>Rust</value><value>python</value></tags></item><item><title><value>Static typing: beyond the basics of def foo(x: int) -&gt; str:</value></title><author><value>Vita Smid</value></author><description><value>The Python community has been warming up to static typing for a few years now. You may have seen talks that did a great job of introducing the basic concepts, mypy, and high-level strategies to cover existing code bases.</value></description><date>July 2019</date><tags><value>Static Analysis</value><value>Type-Hinting</value></tags></item><item><title><value>Software patterns for productive teams</value></title><author><value>Radoslav Georgiev</value></author><description><value>Software development is a team game.</value></description><date>July 2019</date><tags><value>Abstractions</value><value>Best Practice</value><value>Communication</value><value>Django Projects</value><value>Management</value></tags></item><item><title><value>Running a Synchrotron on Open Source Python</value></title><author><value>Clinton Roy</value></author><description><value>A synchrotron is a large research facility that has a large software stack to keep things running, fortunately a large chunk of the stack is Open Source and fair chunk of it is Python to boot. By the end of the talk attendees will understand the scale of the infrastructure (both physical and software) that is required, and have an idea of what sort of problems a synchrotron could help them solve.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Architecture</value><value>Big Data</value><value>Engineering</value><value>Hardware/IoT</value></tags></item><item><title><value>Python's Parallel Programming Possibilities - 4 levels of concurrency</value></title><author><value>Samuel Colvin</value></author><description><value>I'm going to talk about the 4 main levels of parallelism in modern Computing:</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Messaging and Job Queues (RabbitMQ/Redis/...)</value><value>Multi-Processing</value><value>Multi-Threading</value><value>python</value></tags></item><item><title><value>Python Standard Library, The Hidden Gems</value></title><author><value>Alessandro Molina</value></author><description><value>The Python Standard Library is a very rich toolset, which is the reason why Python is stated to come with "batteries included". In such an amount of features and tools it's easy to get lost and miss some of the less unknown modules or gems hidden within the whole load of functions and classes.</value></description><date>July 2019</date><tags><value>CPython</value><value>Debugging</value><value>Development</value><value>General</value><value>python</value></tags></item><item><title><value>Securely executing Python machine learning models with distroless images at ING</value></title><author><value>Thomas Kluiters</value></author><description><value>Executing machine learning models in a production environment can be tricky, especially at a major bank where compliance and risk are carefully taken into account. In this talk I explain how, we, at ING (a large bank operating on global scale), execute our Python models in a production environment by building minimal Docker images for python versions.</value></description><date>July 2019</date><tags><value>Data Science</value><value>Docker</value><value>Machine-Learning</value><value>Operations</value><value>Security</value></tags></item><item><title><value>Refactoring in Python</value></title><author><value>Stanislav Geidl</value><value>Tin Markoviƒá</value></author><description><value>[Replacement talk]</value><value>This talk was a replacement for Stanislav Geidl's talk: From legacy code to modern code</value></description><date>July 2019</date><tags><value>Architecture</value><value>Clean Code</value><value>Development</value><value>Python 3</value><value>legacy-code</value></tags></item><item><title><value>Python for realtime audio processing in a live music context</value></title><author><value>Matthieu Amiguet</value></author><description><value>At Les Chemins de Traverse we explore ways of "augmenting" acoustical musical instruments with new sonic possibilities offered by computers. For doing so, we need ultra-low latency real-time audio processing programs. Pretty much the typical situation where python should *not* be used, right? Wrong. As it happens, that's exactly what we've been doing for the past few years.</value></description><date>July 2019</date><tags><value>Augmented Reality</value><value>DIY</value><value>Linux</value><value>The Answer to Life the Universe and Everything Else</value><value>Use Case</value></tags></item><item><title><value>Python 1994</value></title><author><value>Paul Everitt</value></author><description><value>‚ÄúCome for the language, stay for the community.‚Äù The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.</value></description><date>July 2019</date><tags><value>Community</value></tags></item><item><title><value>PyRun - Shipping the Python 3.7 runtime in just 4.8MB</value></title><author><value>Marc-Andre Lemburg</value></author><description><value>Python has become the defacto standard tool for many people to write tools, command scripts, smaller applications and even large applications.</value></description><date>July 2019</date><tags><value>CPython</value><value>Development</value><value>Linux</value><value>Tooling</value><value>Use Case</value></tags></item><item><title><value>PlotVR - walk through your data</value></title><author><value>Philipp Thomann</value></author><description><value>Are you bored by 3D-plots that only give you a simple rotatable 2d-projection? plotVR is an open source package that provides a simple way for data scientists to plot data, pick up a phone, get a real 3d impression - either by VR or by AR - and use the computer's keyboard to walk through the scatter plot:</value></description><date>July 2019</date><tags><value>3D</value><value>Augmented Reality</value><value>Data Science</value><value>Open-Source</value><value>Visualization</value></tags></item><item><title><value>Publish a (Perfect) Python Package on PyPI</value></title><author><value>Mark Smith</value></author><description><value>Always wanted to publish a package on PyPI, but didn't know where to start? This talk is for you! Starting with nothing, we'll build a package and publish it on PyPI using current best practices.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Packaging</value><value>Python 3</value></tags></item><item><title><value>Practical decorators</value></title><author><value>Reuven Lerner</value></author><description><value>Decorators are one of Python's most powerful features. But even if you understand what they do, it's not always obvious what you can do with them. Sure, from a practical perspective, they let you remove repeated code from your callables. And semantically, they let you think at a higher level of abstraction, applying the same treatment to functions and classes.</value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>Data Structures</value><value>Programming</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>PEP yourself: 10 PEPs you should pay attention to</value></title><author><value>Juan Santos</value></author><description><value>Reading standards documents can be a dull task. But like in other fields, standards in Python play a big part. Python Enhancement Proposals (PEPs) are defined, improved, and eventually implemented by the community. They apply to mostly anything related to Python, from the more abstract and general to the more concrete and specific. Paying attention to them, and knowing which ones to read beforehand is a vital task that should take place prior to writing the first lines of code in a project.</value></description><date>July 2019</date><tags><value>Clean Code</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>Parallel computing in Python: Current state and recent advances</value></title><author><value>Pierre Glaser</value></author><description><value>Parallel computing in Python: Current state and recent advances</value><value>---------------------------------------------------------------</value></description><date>July 2019</date><tags><value>Distributed Systems</value><value>Multi-Processing</value><value>Multi-Threading</value><value>Performance</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Opt Out of Online Sexism ‚Äì Open Source Activism</value></title><author><value>Teresa Ingram</value></author><description><value>"Although people of all genders can experience violence and abuse online, the abuse experienced by women is often sexist or misogynistic in nature, and online threats of violence against women are often sexualized and include specific references to women‚Äôs bodies. " - Amnesty International. This abuse pushes women offline, affecting their social well-being, representation and economic potential. </value></description><date>July 2019</date><tags><value>Communication</value><value>Data Science</value><value>Open-Source</value><value>TDD</value><value>Web</value></tags></item><item><title><value>Opening PyPy's magic black box</value></title><author><value>Ronan Lamy</value></author><description><value>PyPy is a fast and compliant implementation of Python. In other words, it's an interpreter for the Python language that can act as a full replacement for the reference interpreter, CPython. It's optimised to enable efficient just-in-time (JIT) compilation of Python code to machine code, and has releases matching versions 2.7, and 3.6. It now also supports the main pillars of the scientific ecosystem (numpy, Cython, scipy, pandas, ...) thanks to its emulation layer for the C API of CPython.</value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>PyPy</value></tags></item><item><title><value>Optimizing Docker builds for Python applications</value></title><author><value>Dmitry Figol</value></author><description><value>Do you deploy Python applications in Docker? Then this session is for you! </value><value>We will start by reviewing a simple Dockerfile to package a Python application and move to more complex examples which speed up the build process and reduce the size of the resulting Docker image for both development and production builds.</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>Docker</value></tags></item><item><title><value>Natural language processing with neural networks.</value></title><author><value>Hubert Bry≈Çkowski</value></author><description><value>Getting started with a natural language processing and neural networks is easier nowadays thanks to the numerous talks and tutorials. The goal is to dive deeper for those who already know the basics, or want to expand their knowledge in a machine learning field. </value><value>The talk will start with the common use cases that can be generalized to the specific problems in a NLP world. Then I will present an overview of possible features that we can use as input to our network, and show that even simple feature engineering can change our results.</value><value>Furthermore, I will compare different network architectures - starting with the fully connected networks, through convolution neural networks to recursive neural networks. I will not only considering the good parts, but also - what is usually overlooked - pitfalls of every solution. </value><value>All of these  will be done considering number of parameters, which transfers into training and prediction costs and time. I will also share a number of ‚Äútricks‚Äù that enables getting the best results even out of the simple architectures, as these are usually the fastest and quite often hard to beat, at the same time being the easiest to interpret.</value></description><date>July 2019</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>Natural Language Processing</value></tags></item><item><title><value>Moving big projects to Python 3</value></title><author><value>Lennart Regebro</value></author><description><value>Next year Python 2 is no longer maintained. But you have a monster code base with clever tricks and libraries that don't support Python 2, and your data may be stored in a format that is hard to move Python 3. And that's the easy bit.</value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>Management</value><value>Python 3</value><value>Testing</value></tags></item><item><title><value>Modern Data Science with Vaex: A new approach to DataFrames and pipelines</value></title><author><value>Jovan Veljanoski</value></author><description><value>Working with datasets comprising millions or billions of samples is an increasingly common task, one that is typically tackled with distributed computing. Nodes in high-performance computing clusters have enough RAM to run intensive and well-tested data analysis workflows. More often than not, however, this is preceded by the scientific process of cleaning, filtering, grouping, and other transformations of the data, through continuous visualizations and correlation analysis. In today‚Äôs work environments, many data scientists prefer to do this on their laptops or workstations, as to more effectively use their time and not to rely on spotty internet connection to access their remote data and computation resources. Modern laptops have sufficiently fast I/O SSD storage, but upgrading RAM is expensive or impossible.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Big Data</value><value>Data Science</value><value>Machine-Learning</value><value>python</value></tags></item><item><title><value>Modern Continuous Delivery for Python Developers</value></title><author><value>Peter Bittner</value></author><description><value>Deployment automation, cloud platforms, containerization, short iterations to develop and release software‚Äîwe‚Äôve progressed a lot. And finally it‚Äôs official: Kubernetes and OpenShift are the established platforms to help us do scaling and zero downtime deployments with just a few hundred lines of YAML. It‚Äôs a great time.</value></description><date>July 2019</date><tags><value>Agile</value><value>Best Practice</value><value>Clean Code</value><value>Deployment/Continuous Integration and Delivery</value></tags></item><item><title><value>Maintaining a Python Project When It‚Äôs Not Your Job</value></title><author><value>Hynek Schlawack</value></author><description><value>PyPI is a gold mine of great packages but those packages have to be written first. More often than not, projects that millions of people depend on are written and maintained by only one person. If you‚Äôre unlucky, that person is you!</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Open-Source</value></tags></item><item><title><value>Machine learning on non curated data</value></title><author><value>Gael Varoquaux</value></author><description><value>According to industry surveys [1], the number one hassle of data scientists is cleaning the data to analyze it. Textbook statistical modeling is sufficient for noisy signals, but errors of a discrete nature break standard tools of machine learning. I will discuss how to easily run machine learning on data tables with two common dirty-data problems: missing values and non-normalized entries. On both problems, I will show how to run standard machine-learning tools such as scikit-learn in the presence of such errors. The talk will be didactic and will discuss simple software solutions. It will build on the latest improvements to scikit-learn for missing values and the DirtyCat package [2] for non normalized entries. I will also summarize theoretical analyses in recent machine learning publications. </value></description><date>July 2019</date><tags><value>Big Data</value><value>Data</value><value>Data Science</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Look Ma, No HTTP!</value></title><author><value>Miguel Grinberg</value></author><description><value>In this talk I'm going to live code a web application that is built exclusively on top of WebSocket, without using HTTP at all!</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Web Protocols</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Is it me, or the GIL?</value></title><author><value>Christoph Heer</value></author><description><value>Python's Global Interpreter Lock¬†is¬†a¬†friend¬†and rival at the same time.¬†We, as¬†developers,¬†can¬†focus¬†on the¬†design¬†and¬†implementation¬†of¬†applications¬†without the¬†hassle¬†of memory management.¬†On the other side,¬†we complain¬†about the¬†GIL¬†as the limiting factor of performance sensitive applications.¬†Therefore, it is¬†common¬†to refactor¬†parts¬†of¬†systems¬†when the¬†system¬†doesn't perform or scale enough anymore. The refactoring often includes the switch of the used concurrency paradigms like replacing multithreading with multiprocessing or asyncio.¬†Another¬†option¬†is¬†moving¬†logic¬†of CPU-bound workload into¬†C extensions¬†or a¬†full¬†rewrite in a "GIL-free" language.¬†But how¬†do¬†you¬†know¬†that the¬†GIL¬†is¬†the actual¬†performance¬†bottleneck?</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Multi-Threading</value><value>Performance</value><value>Scaling</value><value>Tooling</value></tags></item><item><title><value>Introduction to Python and MongoDB</value></title><author><value>Joe Drumgoole</value></author><description><value>This talk will give anyone who has a basic knowledge of Python insight into how</value><value>easy it is to build database applications using the PyMongo Python library for MongoDB. There will be live coding!</value></description><date>July 2019</date><tags><value>python</value></tags></item><item><title><value>Introduction to low-level profiling and tracing</value></title><author><value>Christian Heimes</value></author><description><value>Python has built-in tracing and profiling facilities in form of callback hooks in the sys module. The settrace and setprofile callbacks have several drawbacks. They slow down the Python interpreter considerable and only allow tracing of Python code. Modern OS and CPUs come with a variety of APIs for efficient and low-level tracing down to system calls, Kernel space code, and hardware events. Some tools even create code that runs in Kernel space.</value></description><date>July 2019</date><tags><value>CPython</value><value>DevOps general</value><value>Performance</value></tags></item><item><title><value>import bacon ü•ì</value></title><author><value>Ivana Kellyerova</value></author><description><value>It's often said that Python comes with batteries included, meaning that the standard library can do basically anything except for maybe conjure bacon for you (though I heard that's coming in 3.8). I don't think we fully appreciate the sheer vastness of it, though, so I went through it module by module looking for hidden gems (sorry, eggs). This is a by no means exhaustive compilation of the useful, the underrated, and the funny.</value></description><date>July 2019</date><tags><value>CPython</value><value>Python general</value><value>The Answer to Life the Universe and Everything Else</value></tags></item><item><title><value>Image processing with scikit-image and Dash</value></title><author><value>Emmanuelle Gouillart</value></author><description><value>Images are an ubiquitous form of data in various fields of science and</value><value>industry. Images often need to be transformed and processed, for example for helping medical diagnosis by extracting regions of interest or measures, or for building training sets for machine learning. </value></description><date>July 2019</date><tags><value>Computer Vision</value><value>Data Science</value><value>Image Processing</value><value>JavaScript Web Frameworks (AngularJS/ReactJS/...)</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>How we run GraphQL APIs in production on our Kubernetes cluster</value></title><author><value>Alexys Jacob</value></author><description><value>In this talk I would like to share the workflow and tools we use to build, deploy and operate GraphQL APIs on our on-premise Kubernetes cluster.</value></description><date>July 2019</date><tags><value>APIs</value><value>Best Practice</value><value>Case Study</value><value>Docker</value><value>Infrastructure</value></tags></item><item><title><value>How to write a JIT compiler in 30 minutes</value></title><author><value>Antonio Cuni</value></author><description><value>Real-world JIT compilers like PyPy and Numba are complex and advanced. However, the basic ideas behind JIT compilers are easy to understand, as this talk aim to show.</value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>Development</value><value>TDD</value></tags></item><item><title><value>How to train an image classifier using PyTorch</value></title><author><value>Rogier van der Geer</value></author><description><value>Neural networks are everywhere nowadays. But while it seems everyone is using them, training your first neural network can be quite a hurdle to overcome.</value></description><date>July 2019</date><tags><value>Deep Learning</value><value>Fun and Humor</value><value>Image Processing</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>From HTTP to Kafka-based microservices</value></title><author><value>Wojciech RzƒÖsa</value></author><description><value>HTTP or asynchronous communication in microservices? This question is frequently repeated and discussed. Obviously, HTTP-based communication is easier for developers and architects. Even if your developers have no prior experience with microservices, they will probably understand how to implement an HTTP service well. While asynchronous communication has a lot of advantages that allow to design and implement really robust microservices system, they also bring new challenges not so obvious for people who didn‚Äôt have a chance to work with such an environment before.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Communication</value><value>Distributed Systems</value></tags></item><item><title><value>From days to minutes, from minutes to milliseconds with SQLAlchemy</value></title><author><value>Leonardo Rochael Almeida</value></author><description><value>Object Relational Mappers (ORMs) are awesome enhancers of developer productivity. The freedom of having the library write that SQL and give you back a useful, rich model instance (or a bunch of them) instead of just a tuple or a list of records is simply amazing.</value></description><date>July 2019</date><tags><value>Debugging</value><value>Performance</value><value>SQL Alchemy</value><value>python</value></tags></item><item><title><value>Extracting Tabular Data from PDFs with Camelot and Excalibur</value></title><author><value>Dimiter Naydenov</value></author><description><value>Portable Document Format (PDF) is commonly used to produce, publish, exchange, and</value><value>archive business and academic documents alike. Often in such PDFs there are tables</value><value>with data that you want to extract and process in some automated fashion. Unlike HTML</value><value>or other formats, PDF has no concept of tables as rows and columns with related data.</value></description><date>July 2019</date><tags><value>Computer Vision</value><value>Image Processing</value><value>Natural Language Processing</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Explaining AI to Managers üë®‚Äçüíºü§ñüë©‚Äçüíº</value></title><author><value>Alexander CS Hendorf</value></author><description><value>Artificial intelligence promises great value. The technology is mostly understood only by few, yet still unexplainable even for experts.</value><value>In this talk I'll present how to narrow the hype down to real value explainable to everyone in your organisation - without the math.</value></description><date>July 2019</date><tags><value>Analytics</value><value>Business</value><value>Deep Learning</value><value>Management</value></tags></item><item><title><value>Exceptional Exceptions</value></title><author><value>Mario Corchero</value></author><description><value>Did you know there are multiple ways to raise and capture exceptions? Have you ever wondered if you should raise a built-in exception or create your own hierarchy? Did you ever find it hard to understand what an exception meant?</value><value>This talk will go through the decisions needed to raise and capture exceptions when creating a library. We will look at how to translate and handle errors, create your own exceptions, and make exceptions clear and easy to troubleshoot, while also understanding how they actually work, common pitfalls.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Development</value><value>General</value><value>Python 3</value><value>Python Skills</value></tags></item><item><title><value>Evolving a helper script into a 180,000-lines-of-Python-code project</value></title><author><value>Mikhail Bushkov</value><value>Max Vogler</value></author><description><value>GRR Rapid Response (https://github.com/google/grr) is an incident response framework focused on remote live forensics.</value></description><date>July 2019</date><tags><value>Databases</value><value>Deployment/Continuous Integration and Delivery</value><value>Development</value><value>Open-Source</value><value>Security</value></tags></item><item><title><value>Enhancing Angklung Music Rehearsals with Python</value></title><author><value>Trapsilo Bumi</value></author><description><value>Angklung is a traditional musical instrument from Indonesia. This instrument has a lot of variety in how it is performed; a common format is the orchestral format in which 15-30 players gather to form a team. Playing Angklung in this way is fun but also presents some challenges that are hard to solve manually.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Analytics</value><value>Beginners</value><value>Case Study</value><value>Use Case</value></tags></item><item><title><value>Downloading a Billion Files in Python</value></title><author><value>James Saryerwinnie</value></author><description><value>You've been given a task.  You need to download some files from a server to your local machine.   The files are fairly small, and you can list and access these files from the remote server through a REST API.  You'd like to download them as fast as possible.  The catch?  There's a billion of them.  Yes, one billion files.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Case Study</value><value>Multi-Processing</value><value>Multi-Threading</value><value>Performance</value></tags></item><item><title><value>Don't do this at work</value></title><author><value>Tiago Montes</value></author><description><value>In this talk I reframe a computer programming workshop for kids I delivered earlier this year, exploring and sharing my experience throughout that journey, from preparation to delivery, by recreating a simple yet engaging enough game.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Education</value><value>Learning</value><value>Life</value><value>Python Skills</value></tags></item><item><title><value>Docker meets Python - A look on the Docker SDK for Python</value></title><author><value>Jan Wagner</value></author><description><value>My talk aims to introduce and have a closer look on the Docker SDK for Python. </value></description><date>July 2019</date><tags><value>Deployment/Continuous Integration and Delivery</value><value>DevOps general</value><value>Docker</value><value>Testing</value><value>Virtualization</value></tags></item><item><title><value>Do we have a diversity problem in Python community?</value></title><author><value>Cheuk Ho</value></author><description><value>The diversity statement quoted as follows: ‚ÄúThe Python Software Foundation and the global Python community welcome and encourage participation by everyone. Our community is based on mutual respect, tolerance, and encouragement, and we are working to help each other live up to these principles. We want our community to be more diverse: whoever you are, and whatever your background, we welcome you.‚Äù</value></description><date>July 2019</date><tags><value>Community</value><value>Conferences and Meet-Ups</value><value>Data Science</value><value>Static Analysis</value></tags></item><item><title><value>Don't start with a database</value></title><author><value>Grzegorz Kocjan</value></author><description><value>What you do when you start a new project? Usually, we begin with database design, then we prepare a migration system, user registration, and all different stuff that distracts us from doing what is most important - business logic. With the clean architecture, we can learn how to start a project in another way and this will be one of two main topics of my talk. The second one will be about new features in Python. You probably heard about typings, mypy, and dataclasses, but I will show you how they can be used in real life project that can be developed over many years in production lifecycle. There will be no "hello world" app, no copy &amp; paste of documentation, only practical knowledge learned through many years of practice.</value></description><date>July 2019</date><tags><value>APIs</value><value>Abstractions</value><value>Architecture</value><value>Best Practice</value><value>Clean Code</value></tags></item><item><title><value>Distributed Multi-GPU Computing with Dask, CuPy and RAPIDS</value></title><author><value>Peter Entschev</value></author><description><value>The search for faster computing remains of great importance to the software community. Relatively inexpensive modern hardware, such as GPUs, allows users to run highly parallel code on thousands, or even millions of cores on distributed systems.</value></description><date>July 2019</date><tags><value>Big Data</value><value>Data Science</value><value>Distributed Systems</value><value>GPU</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Dissecting tf.function to discover AutoGraph strengths and subtleties</value></title><author><value>Paolo Galeone</value></author><description><value>AutoGraph is one of the most exciting new features of Tensorflow 2.0: it allows transforming a subset of Python syntax into its portable, high-performance and language agnostic graph representation bridging the gap between Tensorflow 1.x and the 2.0 release based on eager execution.</value></description><date>July 2019</date><tags><value>Data-Structures</value><value>Machine-Learning</value><value>New Features</value><value>Software Design</value></tags></item><item><title><value>Deploy Python to the cloud faster with Azure Serverless</value></title><author><value>Jeff Hollan</value></author><description><value>Bringing your Python scripts or apps and running them in the cloud is easier than ever with serverless computing. In this talk, we‚Äôll show how you can use Azure Functions to easily deploy and scale your Python workloads without having to manage any servers or pay for unused compute resources. We‚Äôll also show how deep integration with Visual Studio Code offers a great local development experience with full support for debugging and testing your app, and allows you to seamlessly deploy your serverless code to the cloud.</value></description><date>July 2019</date><tags><value>APIs</value><value>Development</value><value>Microservices</value><value>Scaling</value><value>Tooling</value></tags></item><item><title><value>Delta Chat, CFFI, pytest and all the Rust</value></title><author><value>Holger Krekel</value></author><description><value>Delta Chat, a new approach to decentralized messaging, uses Python in several ways. Delta Chat is a Whatsapp/Telegram-style messenger app  which uses the existing e-mail server network instead of central servers. There is no address book upload, and no necessity to tie accounts to mobile numbers. We'll live-demo how "Chat over E-mail" works, with random audience members, in real-time. </value></description><date>July 2019</date><tags><value>Development</value><value>Python general</value><value>Rust</value><value>Sensors</value><value>System Administration</value></tags></item><item><title><value>Deep Learning with TensorFlow 2.0</value></title><author><value>Brad Miro</value></author><description><value>Learn about the updates being made to TensorFlow in its 2.0 version. We‚Äôll give an overview of what‚Äôs available in the new version as well as do a deep dive into an example using its central high-level API, Keras. You‚Äôll walk away with a better understanding of how you can get started building machine learning models in Python with TensorFlow 2.0 as well as the other exciting available features!</value></description><date>July 2019</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Dash: Interactive Data Visualization Web Apps with no Javascript</value></title><author><value>Dom Weldon</value></author><description><value>Your data science or machine learning project probably won't just produce a written report. Instead, projects are increasingly expected to produce interactive tools to allow end-users to explore data and results with rich, interactive visualizations. Inevitably, this will be done in a web browser, meaning you'll need to add a quantitatively trained web developer to your team, or have your data scientists spend time learning HTML, Javascript and CSS. Dash, a project by the team that makes Plotly, solves some of these problems by allowing data scientists to build rich and interactive websites in pure python, with minimal knowledge of HTML and absolutely no Javascript. </value></description><date>July 2019</date><tags><value>Data Science</value><value>JavaScript</value><value>Visualization</value><value>Web</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Configuring uWSGI for Production: The defaults are all wrong</value></title><author><value>Peter Sperl</value></author><description><value>Two years ago, we began migrating from a proprietary service framework to a WSGI-compliant one. We chose uWSGI as our host because of its performance and feature set. But, while powerful, uWSGI's defaults are driven by backward compatibility and are not ideal for new deployments. Powerful features can be overlooked due to the sheer magnitude of its feature set and spotty documentation. As we've scaled up the number of services hosted by uWSGI over the last year, we've had to tweak our standard configuration.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Distributed Systems</value><value>Microservices</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value><value>failures/mistakes</value></tags></item><item><title><value>Code review for Beginners and Experts: Tips &amp; Tricks</value></title><author><value>≈Åukasz KƒÖkol</value></author><description><value>Code review is not just boring duty. It's mutual responsibility for the software we're releasing. It's one of the most critical aspects of code quality, and therefore it's the first step of quality assurance. This is also the key to easier programming and better maintainability. Clean code is much easier to debug, and it's much harder to introduce a bug in such code.</value><value>When you think about code review, you probably think about verifying and examining the code. Reviewing the expert's code may look like a waste of time because he knows what he's doing. Reviewing the code by a beginner may look like a waste of time because he's not able to find as many defects as an experienced developer. Code review is a code quality tool in the first place, but it's also much beyond that. You can teach or help someone, learn from somebody and much more both from the position of reviewer and reviewee.</value><value>There is much more about the real power of code review which I want to share with you.</value><value>This talk is also about how to do it the right way and how to not do it based on lessons learned and my experience within the diverse teams of people with a variety of knowledge and experience. I was reviewing the code but, on the other hand, I was also being reviewed. I'd like to pass my observations to people who are reviewing the code both in commercial and open source projects for a while. This talk is also for those who want to start to review the code, but they do not know how to do it.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Clean Code</value><value>Code Analysis</value><value>Development</value><value>Programming</value></tags></item><item><title><value>Code quality in Python</value></title><author><value>Rados≈Çaw Ganczarek</value></author><description><value>Four years ago I talked about code quality during EuroPython in Bilbao. A lot of things changed from that time. Firstly, most tools I presented were still developed and gained new features, but also new ones appeared I wanted to discuss with you. Secondly, Python changed, Python 3 has type hints on board and there is a new tool dedicated to checking the types. Thirdly - I changed. I'm more distanced form my zealous approach from four years ago. I got real and reasonable. That's why I wanted to talk about code quality tools in Python again.</value><value>I'll talk about all the software that can make code review a bit simpler by pointing out possible errors, duplicates or unused code. I'll talk again about formatters and how can they be used in modern-time projects. And I'll talk about hobgoblins, if you know what I mean :)</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Code Analysis</value><value>Python 3</value><value>Tooling</value><value>Type-Hinting</value></tags></item><item><title><value>Classification Based on Missing Features in Deep Convolutional Neural Networks</value></title><author><value>Nemanja Milosevic</value></author><description><value>Convolutional neural networks have been used for some time now for classification of images, among other things. Recently, some new research leads us to believe that neural network can be "tricked" into wrongly classifying images by adding noise or other artifacts to them. If we want to use Deep Convolutional models in critical scenarios (i.e. self driving cars) we have to be certain that these models that we are using will be certain and robust.</value></description><date>July 2019</date><tags><value>Data</value><value>Data Science</value><value>Deep Learning</value><value>Generative Adversarial Networks</value><value>Machine-Learning</value></tags></item><item><title><value>Building Industry 4.0 logistics applications with MicroPython and ESP32 MCUs</value></title><author><value>Florian Wahl</value></author><description><value>In this session, we will report about a forklift hailing application we built using MicroPython and the ESP32-based prototyping hardware M5Stack. </value><value>In a production facility, machine operators can hail a forklift using an ESP32 device running MicroPython. The device sends a request to a forklift dispatcher software, written in Python. The request is queued and subsequently, the next available forklift is notified and sent to the machine. Each forklift is also fitted with an ESP32 device. In this project, the prototyping hardware M5Stack was used. It features an ESP32 micro controller with Bluetooth, WIFI, GPIO, three buttons, and a display.</value></description><date>July 2019</date><tags><value>Cross-Platform-Development</value><value>DIY</value><value>Hardware/IoT</value><value>Internet of Things (IoT)</value><value>MicroPython</value></tags></item><item><title><value>Building Data-Driven Client Relationship Management in Banking with Python</value></title><author><value>Paul Hughes</value></author><description><value>This is a case study that documents how a small data science team in a big bank took on the challenge to transform a fragmented sales process into a data-driven one using Python and machine learning. </value></description><date>July 2019</date><tags><value>Business Cases</value><value>Data Science</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value><value>Windows</value></tags></item><item><title><value>Building Data Workflows with Luigi and Kubernetes</value></title><author><value>Nar Kumar Chhantyal</value></author><description><value>This talk will focus on how one can build complex data pipelines in Python. I will introduce Luigi and show how it solves problems while running multiple chain of batch jobs like dependency resolution, workflow management, visualisation, failure handling etc.</value></description><date>July 2019</date><tags><value>Architecture</value><value>Big Data</value><value>Data</value><value>Distributed Systems</value><value>Scaling</value></tags></item><item><title><value>Building a Powerful Pet Detector in Notebooks</value></title><author><value>Katherine Kampf</value></author><description><value>Ever wondered what breed that dog or cat is? Let‚Äôs build a pet detector service to recognize them in pictures! In this talk, we will walk through the training, optimizing, and deploying of a deep learning model using Azure Notebooks. We will use transfer learning to retrain a MobileNet model using TensorFlow to recognize dog and cat breeds using the Oxford IIIT Pet Dataset. Next, we‚Äôll optimize the model and tune our hyperparameters to improve the model accuracy. Finally, we will deploy the model as a web service in. Come to learn how you can quickly create accurate image recognition models with a few simple techniques!</value></description><date>July 2019</date><tags><value>Data</value><value>Data Science</value><value>Deep Learning</value><value>Jupyter</value><value>Machine-Learning</value></tags></item><item><title><value>Bioinformatics pipeline for revealing tumour heterogeneity</value></title><author><value>Mustafa Anil Tuncel</value></author><description><value>Reproducibility of research is a common issue in science, especially in computationally expensive research fields e.g. cancer research.</value><value>A comprehensive picture of the genomic aberrations that occur during tumour progression and the resulting intra-tumour heterogeneity, is essential for personalised and precise cancer therapies. With the change in the tumour environment under treatment, heterogeneity allows the tumour additional ways to evolve resistance, such that intra-tumour genomic diversity is a cause of relapse and treatment failure.  Earlier bulk sequencing technologies were incapable of determining the diversity in the tumour.  </value><value>Single-cell DNA sequencing - a recent sequencing technology - offers resolution down to the level of individual cells and is playing an increasingly important role in this field. </value><value>We present a reproducible and scalable Python data analysis pipeline that employs a statistical model and an MCMC algorithm to infer the evolutionary history of copy number alterations of a tumour from single cells. The pipeline is built using Python, Conda environment management system and the Snakemake workflow management system. The pipeline starts from the raw sequencing files and a settings file for parameter configurations. After running the data analysis, pipeline produces report and figures to inform the treatment decision of the cancer patient.</value></description><date>July 2019</date><tags><value>Algorithms</value><value>Analytics</value><value>C-Languages</value><value>Command-Line</value><value>Data Science</value></tags></item><item><title><value>Better WebSockets - Server-Sent Events, a carefree alternative</value></title><author><value>Andrei Neagu</value></author><description><value>Have you ever found yourself in a situation where you:</value><value>- had to use WbSockets?</value><value>- had to to create a separate project and had the issue of interfacing both?</value><value>- had to handle disconnections?</value><value>- had to handle reconnections?</value><value>- had to handle all the above and scale WebSockets?</value></description><date>July 2019</date><tags><value>Mobile</value><value>System Architecture</value><value>Web</value><value>Web Protocols</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Build your Python Extensions with Rust!</value></title><author><value>Paul Ganssle</value></author><description><value>When your Python needs to be fast, one powerful tool is the ability to write compiled extension modules. Normally this is done using the C API, but that requires managing reference counts and memory allocation and is nearly impossible to do *correctly* for non-trivial programs. In this talk, we'll look at how you can write extension modules in Rust - a memory-safe systems programming language that is increasingly popular as a replacement for C and C++, and the [most loved language in the Stack Overflow developer survey 4 years running](https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages).</value></description><date>July 2019</date><tags><value>All Other Programming Languages</value><value>C-Languages</value><value>Rust</value></tags></item><item><title><value>Boosting research with machine learning.</value></title><author><value>Franziska Oschmann</value></author><description><value>Within the last 20 years machine learning (ML) experienced a boost in its impact on our daily lives. With the help of supervised and unsupervised methods tasks like computer vision, recognition of speech or text have been revolutionized. Due to this high impact of ML ongoing research focuses on the constant improvement of these methods. </value><value>However, ML is not exclusively the subject of research, but can also be used as a tool for the investigation of research questions. For example, ML is used to uncover hidden patterns in experimental data not detectable with neither the human eye nor standard statistical methods or to train machines so that they can take over repetitive tasks like object recognition. The increasing usage of ML in research is also due to Python libraries such as keras or scikit-learn. These libraries have simplified the handling of ML methods and thus paved the way for the application of these methods in many different research fields.</value><value>This talk is intended to present examples for current applications of ML in research. These use cases deal with the automatic recognition of single neurons throughout a stack of histological images or the prediction of human arm movements based on EEG signals. Based on these use cases an overview of Python-based techniques for data preparation and data analysis applying different techniques ranging from standard ML methods to state-of-the-art implementations of deep neural networks will be given.</value></description><date>July 2019</date><tags><value>Case Study</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>AsyncIO in production - War Stories</value></title><author><value>Michal Wysokinski</value></author><description><value>My team has been running AsyncIO in production for over 2 years now and the only thing I can say about my experience with it is: "Oh boy, what a rollercoaster of feelings". I've experienced laughs and tears, sweat and blood but also sang songs of glory. AsyncIO is currently the biggest buzzword in the Python world advertised as a silver bullet capable of solving all Python's shortcomings in the field of performance. However, it also brings a burden of being a completely new approach with a fresh implementation which is not often mentioned and taken into consideration. In some of my team's projects we've achieved a great success thanks to AsyncIO, but there's been a few where we decided to get rid of it and replace it with a more traditional fork-join architecture. I'd like to share my experience with AsyncIO, tell some War Stories and discuss which projects it suits perfectly and which ones should avoid it.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Debugging</value><value>Python 3</value><value>Use Case</value></tags></item><item><title><value>Become a command line wizard</value></title><author><value>Sven-Hendrik Haase</value></author><description><value>There are many modern terminal tools with vastly improved user experiences as compared to their traditional alternatives. This talk aims to show off some of those modern terminal tools and compare them side by side with the traditional ones.</value></description><date>July 2019</date><tags><value>Command-Line</value><value>Linux</value><value>System Administration</value><value>Tooling</value><value>Unix</value></tags></item><item><title><value>Auditing hooks and security transparency for CPython</value></title><author><value>Christian Heimes</value><value>Steve Dower</value></author><description><value>The Python Enhancement Proposal 551 describes the concept of security transparency for the CPython runtime environment. The PEP lists planned actions to detect anomalous or malicious use of Python and potentially prevent some abuse cases. The general idea is to make Python less useful for advanced persistent threats (APT). Python 3.8 will come with an implementation of PEP 578, auditing hooks and verified open call for reading code from files.</value></description><date>July 2019</date><tags><value>CPython</value><value>Security</value></tags></item><item><title><value>Audio Classification with Machine Learning</value></title><author><value>Jon Nordby</value></author><description><value>Sound is a rich source of information about the world around us.</value><value>Modern deep learning approaches can give human-like performance on a range of sound classifiction tasks.</value><value>This makes it possible to build systems that use sound to for example:</value><value>understand speech, to analyze music, to assist in medical diagnostics, detect quality problems in manufacturing, and to study the behavior of animals.</value></description><date>July 2019</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>And now for something completely different.</value></title><author><value>Danny Engelbarts</value></author><description><value>The goal of this talk is to show the audience a different way of thinking about and developing regex statements. </value></description><date>July 2019</date><tags><value>Compiler and Interpreters</value><value>Mind Bending</value><value>Programming</value><value>Python Skills</value><value>Tooling</value></tags></item><item><title><value>Astro Pi: Python on the International Space Station</value></title><author><value>Ben Nuttall</value></author><description><value>A collaboration between the Raspberry Pi Foundation and the European Space Agency put two Raspberry Pi computers augmented with sensor boards and camera modules on the International Space Station in 2015. Every year we run a series of competitions for kids in schools around Europe to design science experiments using the available sensors.</value></description><date>July 2019</date><tags><value>Data</value><value>Education</value><value>Linux</value><value>OpenCV</value><value>Raspberry PI</value></tags></item><item><title><value>Advanced pytest</value></title><author><value>Raphael Pierzina</value></author><description><value>There are many reasons why I think pytest is a fantastic test framework: assertion introspection, setup and teardown with fixtures, parametrized tests. But plugins are the real game changer!</value></description><date>July 2019</date><tags><value>Test Libraries (pytest/nose/...)</value><value>Testing</value><value>python</value></tags></item><item><title><value>Advanced asyncio: Solving Real-world Production Problems</value></title><author><value>Lynn Root</value></author><description><value>By building a simplified chaos monkey service, we will walk through how to create a good foundation for an asyncio-based service, including graceful shutdowns, proper exception handling, and testing asynchronous code. We‚Äôll get into the hairier topics as well, covering topics like working with synchronous code, debugging and profiling, and working with threaded code. We‚Äôll learn how to approach asynchronous and concurrent programming with Python‚Äôs asyncio library, take away some best practices, and learn what pitfalls to avoid.</value></description><date>July 2019</date><tags><value>ASYNC / Concurreny</value><value>Best Practice</value><value>Development</value></tags></item><item><title><value>Python Performance: Past, Present and Future</value></title><author><value>Victor Stinner</value></author><description><value>Python Performance: Past, Present and Future</value></description><date>July 2019</date><tags><value>python</value></tags></item><item><title><value>A Day Has Only 24¬±1 Hours</value></title><author><value>Miroslav ≈†ediv√Ω</value></author><description><value>On the last Sunday of October you may get ‚Äúone more hour of sleep‚Äù but as well may spend much more time debugging code dealing with the time zones, daylight saving time shifts and datetime stuff in general.</value></description><date>July 2019</date><tags><value>Best Practice</value><value>Community</value><value>Python general</value><value>The Answer to Life the Universe and Everything Else</value><value>failures/mistakes</value></tags></item><item><title><value>Why You Should Pursue Public Speaking and How to Get There</value></title><author><value>Yenny Cheung</value></author><description><value>Fear of public speaking is the most common of all phobias. Want to speak confidently in front of the crowd? This talk shares tips on how to overcome the fear, and ways to get started. You will be prepared to brace presenting from a team meeting to a conference.</value></description><date>July 2019</date><tags><value>Community</value></tags></item><item><title><value>Accelerate your Deep Learning Inferencing with the Intel¬Æ DL Boost technology</value></title><author><value>Shailen Sobhee</value></author><description><value>Learn about Intel¬Æ Deep Learning Boost, also known as Vector Neural Network Instructions (VNNI), a new set of AVX-512 instructions, that are designed to deliver significantly more efficient Deep Learning (Inference) acceleration. Through this technology, I will show you how you can perform low-precision (INT8) inference much faster on hardware that support the VNNI instruction set (for example, the 2nd generation Intel Xeon Scalable processors, codenamed, Cascade Lake). In the live Jupyter notebook session, you can will be able to see the benefits of this new hardware technology. </value></description><date>July 2019</date><tags><value>Data Science</value><value>Deep Learning</value><value>Performance</value><value>python</value></tags></item><item><title><value>Getting Your Data Joie De Vivre Back!</value></title><author><value>Lynn Cherny</value></author><description><value>Most of us work too much and play too little.¬† When was the last time you smiled at something you made?¬† Playing with fun datasets, especially big data sets, opens up weird new forms of technical recreation.¬† Why not train an amusing model in a browser tab while you're waiting for that day-job Spark query to finish?¬† I'll show you some data toys I've built using AI and interesting data sets: Most of them involve both backend data science and front-end visualization tricks.¬† They range from poetry-composition helpers to game log analysis to image deconstruction and reconstruction. All of them taught me something, often about myself and what I like artistically, and sometimes about what "big data" actually means.</value></description><date>July 2019</date><tags><value>Big Data</value><value>Deep Learning</value><value>Visualization</value></tags></item><item><title><value>Are women underrepresented in the High Performance Computing (HPC) community?</value></title><author><value>Athina Frantzana</value></author><description><value>This study is the first attempt to understand the current gender demographics of the HPC community, and identify potential reasons and ways to tackle the gender imbalance. By listening to the people who constitute the community, the study offers a guideline on what the HPC community should focus on in order to become more attractive, accessible and useful to everyone.</value></description><date>July 2019</date><tags><value>Diversity</value></tags></item></items>